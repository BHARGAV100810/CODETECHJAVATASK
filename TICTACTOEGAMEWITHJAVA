package projects;

import java.util.Scanner;

public class TicTacToe {

    public static void main(String[] args) {
        // Create a 3x3 game board
        char[][] board = new char[3][3];
        
        // Initialize the game board with empty spaces
        for (int i = 0; i <= board.length - 1; i++) {
            for (int j = 0; j <= board[i].length - 1; j++) {
                board[i][j] = ' ';
            }
        }
        
        char player = 'X'; // Initialize player as 'X'
        boolean gameOver = false; // Variable to track if the game is over
        Scanner s = new Scanner(System.in); // Scanner object for user input
        
        // Main game loop
        while (!gameOver) {
            // Print the current game board
            printBoard(board);
            System.out.println("player " + player + " Enter");
            int row = s.nextInt(); // Read row input from player
            int column = s.nextInt(); // Read column input from player
            System.out.println();

            // Check if the chosen cell is empty
            if (board[row][column] == ' ') {
                board[row][column] = player; // Place player's mark on the board
                // Check if the player has won the game
                gameOver = haveWon(board, player);
                if (gameOver) {
                    System.out.println("player " + player + " hasWon"); // Display win message
                }
                // Switch players
                player = (player == 'X') ? 'O' : 'X'; // Alternate between 'X' and 'O'
            } else {
                System.out.println("Invalid move , please try again"); // Inform player of invalid move
            }
        }
        // Print the final game board
        printBoard(board);
        s.close(); // Close the scanner
    }

    // Method to check if a player has won the game
    private static boolean haveWon(char[][] board, char player) {
        // Check rows for win
        for (int i = 0; i <= board.length - 1; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
        }
        // Check columns for win
        for (int j = 0; j <= board[0].length - 1; j++) {
            if (board[0][j] == player && board[1][j] == player && board[2][j] == player) {
                return true;
            }
        }
        // Check diagonals for win
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true;
        }
        return false; // No win condition found
    }

    // Method to print the game board
    private static void printBoard(char[][] board) {
        for (int i = 0; i <= board.length - 1; i++) {
            for (int j = 0; j <= board[i].length - 1; j++) {
                System.out.print(board[i][j] + "|");
            }
            System.out.println();
        }
    }
}
